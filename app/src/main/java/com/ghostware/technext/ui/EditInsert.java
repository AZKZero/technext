package com.ghostware.technext.ui;

import android.content.Context;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.inputmethod.InputMethodManager;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;
import androidx.databinding.DataBindingUtil;
import androidx.lifecycle.ViewModelProvider;

import com.ghostware.technext.R;
import com.ghostware.technext.core.Core;
import com.ghostware.technext.core.Repository;
import com.ghostware.technext.databinding.ActivityEditInsertBinding;
import com.ghostware.technext.models.Author;
import com.ghostware.technext.models.Blog;
import com.ghostware.technext.viewmodels.BlogModel;
import com.google.android.material.checkbox.MaterialCheckBox;

import java.util.ArrayList;

import javax.inject.Inject;

public class EditInsert extends AppCompatActivity {

    ActivityEditInsertBinding binding;
    public static final String TAG = "EditInsert";
    int blogId;
    ArrayList<String> categories = new ArrayList<>();

    @Inject
    Repository repository;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        binding = DataBindingUtil.setContentView(this, R.layout.activity_edit_insert);
        Core.getCore().appComponent.inject(this);

        blogId = getIntent().getIntExtra("blogId", 0);
        BlogModel blogModel = new ViewModelProvider(this).get(BlogModel.class);
        if (blogId != 0) blogModel.getBlog(blogId).observe(this, blog -> {
            Log.d(TAG, "onCreate: " + Core.getCore().gson.toJson(blog));
            binding.setBlog(blog);

            binding.flex.removeAllViews();

            for (String category : Repository.categories) {
                View v = LayoutInflater.from(this).inflate(R.layout.cat_item_checkbox, null);
                MaterialCheckBox x = v.findViewById(R.id.cat);
                x.setText(category);
                x.setOnCheckedChangeListener((buttonView, isChecked) -> {
                    String selected = buttonView.getText().toString();
                    if (isChecked && !categories.contains(selected)) categories.add(selected);
                    else if (!isChecked) categories.remove(selected);
                });
                x.setChecked(blog.categories.contains(category));
                binding.flex.addView(v);
            }
        });

        for (String category : Repository.categories) {
            View v = LayoutInflater.from(this).inflate(R.layout.cat_item_checkbox, null);
            MaterialCheckBox x = v.findViewById(R.id.cat);
            x.setText(category);
            x.setOnCheckedChangeListener((buttonView, isChecked) -> {
                String selected = buttonView.getText().toString();
                if (isChecked && !categories.contains(selected)) categories.add(selected);
                else if (!isChecked) categories.remove(selected);
            });
            binding.flex.addView(v);
        }
        binding.save.setOnClickListener(this::submit);
    }

    void submit(View v) {
        closeKeyboard();
        String
                title = binding.title.getText().toString(),
                description = binding.description.getText().toString(),
                cover = binding.cover.getText().toString(),
                authorName = binding.authorName.getText().toString(),
                authorProfession = binding.authorProfession.getText().toString(),
                authorAvatar = binding.authorAvatar.getText().toString();
        int authorId = 0;
        try {
            authorId = Integer.parseInt(binding.authorId.getText().toString());
        } catch (NumberFormatException e) {
            e.printStackTrace();
            Toast.makeText(this, "Invalid Author Id, will be autogenerated", Toast.LENGTH_SHORT).show();
        }
        Author author = new Author(authorId, authorName, authorAvatar, authorProfession);
        Handler handler = new Handler(getMainLooper());
        repository.insertAuthor(author, handler, authorId1 -> {
            Blog blog = new Blog(blogId, title, description, cover, categories, authorId1);
            repository.insertBlog(blog, handler, blogId1 -> {
                Toast.makeText(this, blogId == 0 ? "Blog Inserted!" : "Blog Updated!", Toast.LENGTH_LONG).show();
                finish();
            });
        });
    }

    private void closeKeyboard() {
        InputMethodManager methodManager = (InputMethodManager) getApplicationContext().getSystemService(Context.INPUT_METHOD_SERVICE);

        try {
            methodManager.hideSoftInputFromWindow(getWindow().getDecorView().getWindowToken(), 0);
        } catch (NullPointerException e) {
            e.printStackTrace();
        }
    }

}